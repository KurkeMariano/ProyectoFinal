version: '3'

services:
  backend:
    build: 
      context: ./backend 
      dockerfile: ./Dockerfile
    command: python app.py # O el comando para iniciar tu aplicación backend
    volumes:
      - ./backend:/app
    ports:
      - 5000:5000 # Ajusta según tu configuración
    depends_on:
      - db # Si tienes una base de datos

  #frontend:
  #  build: 
  #    context: ./frontend/angular_app
  #    dockerfile: ./Dockerfile
  #  volumes:
  #    - ./frontend/angular_app:/app
  #  ports:
  #    - 4200:4200
  #  depends_on:
  #    - backend # Para que el frontend espere a que el backend esté listo

  # Servicio de Airflow
  airflow:
    image: puckel/docker-airflow # O una imagen personalizada de Airflow
    environment:
      - LOAD_EX=dags,webserver,scheduler,celery,flower,triggerer,redis # Servicios a iniciar
      - FERNET_KEY=... # Genera una clave segura (importante para la seguridad)
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://usuario_db:contraseña_db@db/airflow # Conexión a la base de datos (ajusta según tu configuración)
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor # O el ejecutor que prefieras
    volumes:
      - ./backend/airflow/dags:/opt/airflow/dags # Monta tus DAGs
      - ./backend/airflow/config:/opt/airflow/config # Configuración personalizada (opcional)
    ports:
      - 8080:8080 # Puerto de la interfaz web de Airflow
    depends_on:
      - db # Airflow depende de la base de datos

  # Ejemplo de servicio de base de datos PostgreSQL (ajusta según tu configuración)
  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: usuario_db
      POSTGRES_PASSWORD: contraseña_db
      POSTGRES_DB: nombre_db
    volumes:
      - ./data/db:/var/lib/postgresql/data
